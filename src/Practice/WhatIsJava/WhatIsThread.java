package Practice.WhatIsJava;

public class WhatIsThread {
    public static void main(String[] args) {

        //멀티태스킹(여러 작업이 동시에 처리되는 것
        //스레드: 운영체제에 관리되는 하나의 작업
        //하나의 프로세스가 두가지 이상의 작업을 처리할 수 있는 이유는 멀티 스레드가 있기 때문이다.
        //멀티 프로세스는 서로 독립적이다.
        //프로그램 개발에 있어서 멀티스레드는 꼭 필요한 기능

        //모든 자바 프로그램은 메인 스레드가 main() 메소드를 실행하면서 시작된다.

        //멀티스레드에서는 실행 중인 스레드가 하나라도 있다면 프로세스는 종료되지 않는다.

        //java.lang 패키지에 있는 Thread 클래스로부터 작업 스레드 객체를 직접 생성하려면
        // 다음과 같이 Runnable 구현 객체를 매개값으로 갖는 생성자를 호출하면 된다.

        //Thread thread = new Thread (Runnable target);

        //class Task implements Runnable{
        //  @Override
        //  public void run() {
        //      (스레드가 실행 할 코드)
        //  }
        //}

        //응용프로그램은 하나 이상의 스레드로 구성 가능
        //하나의 JVM은 하나의 응용프로그램만 실행

        //start() 메소드가 호출되면
        // 작업 스레드는 매개값으로 받은 Runnable의 run() 메소드를 실행하면서 작업을 처리한다.

        //스레드 객체를 생성(NEW)하고, start() 메소드를 호출하면
        // 곧바로 스레드가 실행되는 것이 아니라 실행 대기 상태(RUNABLE)가 된다.

        //실행 상태에서 일시 정지 상태로 가기도 하는데,
        // 일시 정지 상태는 스레드가 실행할 수 없는 상태를 말한다.

        //sleep(long millis) : 밀리세컨드 단위

        //멀티스레드는 하나의 객체를 공유해서 작업할 수 있다.
        //스레드가 사용 중인 객체를 다른 스레드가 변경할 수 없도록 하려면
        // 스레드 작업이 끝날 때까지 객체에 잠금을 걸면 된다.

        //스레드 동기화 방법
        //1. synchronized 키워드로 동기화 블록 지정
        //ex)public synchronized void method(){
        //      단 하나의 스레드만 실행하는 영역
        //}
        //2. wait() =notify() 로 스레드의 실행 순서 제어
        //경우에 따라서는 두 개의 스레드를 교대로 번갈아 가며 실행할 때도 있다.
        //notify()는 wait()에 의해 일시 정지된 그레드 중 한 개를 실행 대기상태로 만든다.
        //notifyAll()은 wait()에 의해 일시 정지된 모든 스레드를 실행 대기상태로 만든다.



    }
}
